                  ***************     Python – Collections, functions and Modules   *************************

THEORY :-


Q1*  Understanding how to create and access elements in a list.


>  Lists are used to store multiple items in a single variable.

> Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.


Q2*  Indexing in lists (positive and negative indexing).


> 1. Positive Indexing
Starts from 0.

The first element is at index 0, second at 1, and so on.

> 2. Negative Indexing
Starts from -1 (last element).

Helps to access elements from the end of the list.


Q3*  Slicing a list: accessing a range of elements.


>Slicing is used to access a range of elements from a list by specifying a start, stop, and step.

> numbers = [10, 20, 30, 40, 50, 60]

print(numbers[1:4])  # Output: [20, 30, 40]



Q4* Sorting and reversing a list using sort(), sorted(), and reverse()

>Sorts the list

>sort() – sorts the list in place.

>sorted() – returns a new sorted list.

>everse() – reverses the list in place (does not sort it).



Q5* Basic list manipulations: addition, deletion, updating, and slicing.

> Addition (append, insert)

>Deletion (remove, pop, del)

>Updating (changing elements)

>Slicing (getting a part of the list)



Q6* Write a Python program to iterate over a list using a for loop.

>  # Define a list of fruits
    fruits = ['apple', 'banana', 'cherry', 'orange']

# Iterate over the list using a for loop
print("List of fruits:")
for fruit in fruits:
    print(fruit)



Q7* Introduction to tuples, immutability

>  A tuple is a built-in data structure in Python that is used to store multiple items in a single variable, just like a list. However, tuples are immutable, meaning you cannot change, add, or remove items after the tuple is created.



Q8* Creating and accessing elements in a tuple.

>       # Creating a tuple with multiple items
        fruits = ('apple', 'banana', 'cherry', 'orange')
        print("Tuple:", fruits)



Q9* Basic operations with tuples: concatenation, repetition, membership.

> 1. Concatenation (+)

tuple1 = (1, 2, 3)
tuple2 = (4, 5)
combined = tuple1 + tuple2
print("Concatenated tuple:", combined)

> 2. Repetition (*)

tuple3 = ('A', 'B')
repeated = tuple3 * 3
print("Repeated tuple:", repeated)

> 3. Membership (in, not in)

numbers = (10, 20, 30, 40)

print("20 in numbers:", 20 in numbers)        # True
print("50 not in numbers:", 50 not in numbers)  # True



Q10* Accessing tuple elements using positive and negative indexing.

>   Positive & Negative Indexing in Tuples
    Positive Indexing starts from 0 (left to right)

    Negative Indexing starts from -1 (right to left)




Q11*  Slicing a tuple to access ranges of elements.

> licing allows you to access a range of elements from a tuple using the syntax:

>   start: index where the slice begins (inclusive)
>   stop: index where the slice ends (exclusive)



Q12* Write a Python program to access values between index 1 and 5 in a tuple.

> # Define a sample tuple
my_tuple = (10, 20, 30, 40, 50, 60, 70)

# Access values from index 1 to 4 (index 5 is excluded)
sliced_tuple = my_tuple[1:5]

# Print the result
print("Values between index 1 and 5:", sliced_tuple)



Q13* Introduction to dictionaries: key-value pairs.

> A dictionary in Python is a collection of key-value pairs. It is unordered (before Python 3.7), changeable, and does not allow duplicate keys.

> Uses curly braces {}
>Keys must be unique and immutable (like strings, numbers, tuples)
>Values can be of any data type
>Access values using keys, not index.



Q14* Accessing, adding, updating, and deleting dictionary elements.

> Access value	student["name"] or student.get("name")	Get value using key.

> Add new pair	student["grade"] = "A"	Add new key-value pair

> Update value	student["age"] = 21	Change value of existing key

> Delete pair	del student["course"]	Remove key and its value



Q15* Dictionary methods like keys(), values(), and items().

> keys()	Returns a list of all the keys
>values()	Returns a list of all the values
>items()	Returns a list of all key-value pairs (tuples)


Q16* Defining functions in Python.

> Use def to define a function.
>Parameters go inside the parentheses.
>Use return to send a result back (optional).
>Call the function using its name followed by parentheses.


Q17* Anonymous functions (lambda functions).

>You can assign a lambda to a variable.
>It can take any number of arguments, but only one expression (no multiple statements).
> lambda arguments: expression

Q18* Introduction to Python modules and importing modules.

> A module is simply a file containing Python code (functions, classes, variables) that you can reuse in other Python programs.
> math, random, and datetime are built-in modules in Python.


Q19* Standard library modules: math, random.

> math Module :- The math module provides access to mathematical functions and constants.
> random Module :- The random module is used to generate random numbers or choose random elements.

Q20* Creating custom modules.

> A custom module is simply a Python file (.py) that contains functions, classes, or variables you create — so you can reuse them in other programs.

> Code Reusability
> Better Organization
> Easier Maintenance
> Separation of Concerns


