
                                          ******   PYTHON ASSIGNMENT ******


1*	Introduction to Python Theory:


A.	Introduction to Python and its Features (simple, high-level, interpreted language).

>	Python is a high-level dynamic programming language that is open source and free of charge. 
>	High Demand: Popular in industries like AI, software development, finance, and cloud computing.
>	Python has gained popularity because of its simplicity, easy syntax, and user-friendly environment.


B.	History and evolution of Python.

>	Python is a widely used general-purpose, high-level programming language. It was initially designed by Guido van Rossum in 1991 and developed by Python Software Foundation. 
>	Python was developed by Guido van Rossum (a Dutch programmer) in the late 1980s and early nineties at the National Research Institute for      Mathematics and Computer Science in the Netherlands.
>	the first version of Python, Python 0.9.0, in February 1991. 

 
C.	 Advantages of using Python over other programming languages.

>    Python is an easily readable and simple to understand language for developers who have never written a code in it.
>	Python has high – performance  Libraries like NumPy and Pandas.
>	Python is a great helper for data analysis and scientific computing, thanks to special tools like NumPy, pandas and matplotlib.
>	The show_advantages method in this class prints out the advantages of Python.

D.	 Writing and executing your first Python program.

>	print("Hello World")

    Output:- Hello World

>   In Python, anything inside print() is displayed on the screen.

    There are two things to note about print():

    Everything we want to display on the screen is included inside the parentheses ().
    The text we want to print is placed within double quotes " ".


2*  Programming Style:



A.  Understanding Python’s PEP 8 guidelines.

>   PEP8 stands for Python Enhancement Proposal for writting clean, readable and maintainable code in Python Programming Language. 

>   Use 4-space indentation and no tabs.

    example ;

     # Aligned with opening delimiter.

B.  Indentation, comments, and naming conventions in Python:

>   Indentation:-
                    Whitespace is used for indentation in Python. Unlike many other programming languages which only serve to make the code easier to read, Python indentation is mandatory. One can understand it better by looking at an example of indentation in Python.
  
>   comment:-       Python comments start with the hash symbol # and continue to the end of the line.
                    There are two types of comment. 1(single line comment)
                                                    2(Multiline comment)

>   naming :-       Naming conventions in Python refer to rules and guidelines for naming variables, functions, classes, and other entities in your code.

                    Modules
                    Variables
                    Classes
                    Exceptions

C.   Writing readable and maintainable code:

> Achieving clean code involves following a set of best practices and standards, such as using meaningful names, keeping functions small and focused, and using comments sparingly. Having a code base, which is readable and maintainable is essential for sustainable development.


3*  Core Python Concepts:-


A.  Understanding data types: integers, floats, strings, lists, tuples, dictionaries, sets.

>   Integers     :- Understanding data types: integers, floats, strings, lists, tuples, dictionaries, sets.
                 Example: 5, -10, 1000

>  floats        :- Numbers with a decimal point.
                Example: 3.14, -2.5, 0.0
    
>  strings       :- sequence of characters enclosed in quotes (' ', " ", or ''' ''')
                Example: "Hello", 'Python', "123"

>  lists         :- An ordered, changeable (mutable) collection. Can hold mixed data types.
                Syntax: Square brackets []
                Example: [1, 2, 3], ['a', 10, 3.5]

> tuples        :- An ordered, unchangeable (immutable) collection.
                Syntax: Round brackets ()
                Example: (1, 2, 3), ("a", 10)

> dictionaries   :- An unordered collection of key-value pairs.
                Syntax: Curly braces {}, keys and values separated by :
                Example: {"name": "John", "age": 30}


> sets           :- An unordered, unindexed, and unique collection (no duplicates).
                Syntax: Curly braces {} or the set() function.
                Example: {1, 2, 3}, {"a", "b"}


B.   Python variables and memory allocation.


c.   Python operators: arithmetic, comparison, logical, bitwise

>
            | Type       | Examples          |              
            | ---------- | ----------------- | 
            | Arithmetic | `+ - * / % // **` |              
            | Comparison | `== != > < >= <=` |              
            | Logical    | `and or not`      |              
            | Bitwise    | \`&               | 


4*   Conditional Statements :-

A.  Introduction to conditionalstatements: if, else, elif

>    Conditional statements are used to make decisions in your program. Based on whether a condition is True or False, the program will execute different blocks of code.

>   IF statements:-  
                  The if statement checks a condition. If the condition is True, it runs the indented block of code.

    example:-     if condition:
                  # code to run if condition is True

>   ELSE statements:-
                The else block runs only if the if condition is False.

    example:-   if condition:
                    # code if condition is True
                else:
                    # code if condition is False


>   ELIF statements:- 
                The elif statement allows you to check multiple conditions one by one.

    example:-   if condition1:
                    # code if condition1 is True
                elif condition2:
                    # code if condition2 is True
                else:
                    # code if none of the above conditions are True


B. Nested if-else conditions

>    nested if-else is an if or else block inside another if or else block. This allows you to make more detailed decisions based on multiple conditions.

>   syntex :- 
                        if condition1:
                            if condition2:
                                # Code if both condition1 and condition2 are True
                            else:
                                 # Code if condition1 is True, but condition2 is False
                        else:
                             # Code if condition1 is False


5* Looping (For, While)

A. Introduction to for and while loops.

>   for loop :- 
                used when you know how many times to repeat. Used to iterate over a sequence (like a list, string, or range()).

            example:-   for i in range(5):
                            print(i)
>   while loops :-
                used when you want to repeat until a condition is False. Used when you want to repeat a block of code as long as a condition is True.

            example:-   i = 1
                        while i <= 5:
                            print(i)
                        i += 1

B. How loops work in Python.

>  Loops allow you to execute a block of code repeatedly as long as a condition is met or over a sequence.
This helps avoid repeating code manually and supports automation and iteration in programs.

Two Main Types of Loops:-

| Loop Type | Purpose                                    |
| --------- | ------------------------------------------ |
| `for`     | Iterate over a sequence (like list, range) |
| `while`   | Repeat as long as a condition is `True`    |


C. Using loops with collections (lists, tuples, etc.)

> Using for Loop with a List

fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)

> Using for Loop with a Tuple

colors = ("red", "green", "blue")
for color in colors:
    print(color)

> Using while Loop with Collections

colors = ["red", "green", "blue"]
i = 0
while i < len(colors):
    print(colors[i])
    i += 1
